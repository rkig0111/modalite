"""
Django settings for modalite project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os, sys
from pathlib import Path
import json
import logging
import logging.config
from import_export.formats.base_formats import XLSX

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = "django-insecure-av8tgjmuk5=ehmq*qm9*euzku(@absw4*351u%x$ry^wbiei3c"

# SECURITY WARNING: don't run with debug turned on in production!


ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'django_extensions',
    "imagerie",
    "django_htmx",
    "rest_framework",
    'dicom',
    'simple_history',
    # 'djangoql',
    'import_export',
    #'bootstrap5',
]

MIDDLEWARE = [
    #"debug_toolbar.middleware.DebugToolbarMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django_htmx.middleware.HtmxMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    'simple_history.middleware.HistoryRequestMiddleware',
]

ROOT_URLCONF = "modalite.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "modalite.wsgi.application"

try:
    import debug_toolbar

    del debug_toolbar
    DEBUG_TOOLBAR = True
except ImportError:
    DEBUG_TOOLBAR = False

DEBUG = False

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
    
#            
#  /|\      Cette déclaration est temporaire le temps d'utiliser la BDD
# /_!_\     en developpement ET en Prod.  
#           la base sera à terme sur Postgres et séparée de celle de développement !
#           le SECRET_KEY  sera aussi à définir ! pour l' instant il y a celle de 
#           développement qui est dans le fichier instance_settings.py non publiée.

DATABASES = {                     
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db2.sqlite3",
    },
    # "default": {
    #     "ENGINE": "django.db.backends.sqlite3",
    #     "NAME": BASE_DIR / "db2.sqlite3",
    # },
    # "olddb": {
    #     "ENGINE": "django.db.backends.sqlite3",
    #     "NAME": Path("/home/kligliro/repos_modalite/modalite/db.sqlite3"),
    # },
}

# print("utilisation de la BDD <olddb> accessible ici : /home/kligliro/repos_modalite/modalite/db.sqlite3 ")

# AUTH_USER_MODEL = 'imagerie.MUser'

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "fr-fr"
TIME_ZONE = "Europe/Paris"
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / 'static'
"""STATICFILES_DIRS = [
    BASE_DIR / 'static',
]"""

MEDIA_ROOT = BASE_DIR / 'media'
MEDIA_URL = '/media/'

STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

INTERNAL_IPS = [
    # ...
    "127.0.0.1",
    # ...
]

MACADDRESS_DEFAULT_DIALECT = 'netaddr.mac_unix_expanded'

# logging.basicConfig(level=logging.INFO, format='%(asctime)s %(name)s %(levelname)s %(message)s', datefmt='%Y-%m-%dT%H:%M:%S')
# 
# class DebugOnlyFilter(logging.Filter):
#     def filter(self, record):
#         if record.levelno == logging.DEBUG:
#             allow = True
#         else:
#             allow = False
#         return allow


# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': True,
#     'filters': {
#         'debug_only_filter': {
#             '()': DebugOnlyFilter,
#         },
#     },
#     'formatters': {
#         'default': {
#             'format': '%(asctime)s %(name)s %(levelname)s %(message)s',
#             'datefmt': '%Y-%m-%dT%H:%M:%S',
#         },
#         'debug_format': {'format': '[%(asctime)s]: %(levelname)s in %(name)s at line %(lineno)s: "%(message)s"'},
#     },
#     'handlers': {
#         'console': {
#             'level': 'INFO',
#             'class': 'logging.StreamHandler',
#             'formatter': 'default',
#         },
#         'debug_console': {
#             'level': 'DEBUG',
#             'class': 'logging.StreamHandler',
#             'formatter': 'default',
#             # 'formatter': 'debug_format',
#             # 'filters': ['debug_only_filter'],
#         },
#         'dicom': {
#             'level': 'INFO',
#             'class': 'logging.FileHandler',
#             'filename': './admin.log',
#             'formatter': 'default',
#         },
#     },
#     'root': {
#         'handlers': ['console'],
#         'level': 'DEBUG',
#     },
#     'loggers': {
#         'modalite': {
#             'handlers': ['console', 'debug_console'],
#             'propagate': False,
#         },
#         'admin': {
#             'handlers': ['console', 'debug_console'],
#             'propagate': False,
#         },
#     },
# }



# Do not modify code below, please !

# This will import specific settings for production, testing environment, development...


file = Path("instance_settings.py")
if file.exists():
    from instance_settings import * 
else:
    print("No site/environment configuration found.")

print("DATABASES prisent en charge : ", DATABASES)

# print("DEBUG : ", DEBUG)